@page "/wordsp"

@using System.IO
@using System.Text
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JS

<h3>Word list parser</h3>
<div class="col">
    <label>Enter a parsing url</label>
    <div class="flex-row">
        <input @bind="Url" @bind:event="oninput" @onkeyup="ValidateUrl"></input>
        <a class="btn btn-outline-dark @(IsUrlValid ? "": "disabled")" @onclick="TryDownload">Generate and download file</a>
    </div>
    <br />
    @foreach (var eMessage in ErrorMessages)
    {
        <div class="text-danger">@eMessage</div>
    }
</div>


<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>

@code {
    private string? Url { get; set; }
    private bool IsUrlValid { get; set; } = true;
    private List<string> ErrorMessages { get; set; } = Enumerable.Empty<string>().ToList();

    private void ValidateUrl()
    {
        ErrorMessages.Clear();
        IsUrlValid = Uri.IsWellFormedUriString(Url, UriKind.Absolute);
        if (!IsUrlValid) ErrorMessages.Add("It seems like passed url isn't valid.");
    }

    private async Task TryDownload()
    {
        if(!String.IsNullOrEmpty(Url))
        {
            var wordList = await GetWordListByHttp(Url);
            if (wordList is null) return;

            var fileStream = GetFileAsStream(wordList);
            await DownloadFile("wordList.txt", fileStream);
        }
    }

    private async Task DownloadFile(string fileName, Stream stream)
    {
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task<IEnumerable<ParsingWordDTO>?> GetWordListByHttp(string url)
    {
        StringContent jsonContent = new(
        JsonSerializer.Serialize(
            new String(url)
        ),
        Encoding.UTF8,
        "application/json");

        var response = await Http.PostAsync(
            String.Concat(Http.BaseAddress, "api/WordList/getwordlist"),
            jsonContent
        );
        if(response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<IEnumerable<ParsingWordDTO>>();
        }

        ErrorMessages.Add(await response.Content.ReadAsStringAsync());
        return null;
    }

    private Stream GetFileAsStream(IEnumerable<ParsingWordDTO> wordList)
    {
        StringBuilder lines = new StringBuilder();
        foreach(var word in wordList)
        {
            lines.AppendLine(word.OriginWord);
        }
        return new MemoryStream(Encoding.UTF8.GetBytes(lines.ToString()));
    }
}
